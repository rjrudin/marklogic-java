/*
 * This is an example of applying a non-version controlled Gradle file that a user may wish to create to override 
 * properties defined in gradle.properties. Gradle does not provide an out-of-the-box mechanism for doing this, but the
 * below technique will do the job. The local.gradle file can define an "ext" block to override properties, as well as
 * including any other valid Gradle build scripting. 
 */
try {
    apply from: "local.gradle"
    println "Applied local.gradle file"
} catch (Exception e) {
    println "Couldn't find local.gradle; you can create this gitignore'd file to override properties if necessary"
}

/**
 * The buildscript block lets us tell Gradle about our dependency on ml-gradle and where to find its dependencies.
 */
buildscript {
    repositories {
        mavenCentral()
        maven {url "http://developer.marklogic.com/maven2/"}
        maven {url "http://rjrudin.github.io/marklogic-java/releases"}
    }

    dependencies { classpath "com.marklogic:ml-gradle:1.1.2" }
}

/*
 * This applies the ml-gradle plugin. This results in 3 key things being added to the Gradle project. First, a number of
 * tasks prefixed with "ml" are registered - you can see these by running "gradle tasks". Second, an instance of AppConfig
 * is added under the name "mlAppConfig". This defines properties for the name of the application and how to connect to 
 * it - e.g. what port numbers it uses. Third, an instance of ManageConfig is added under the name "mlManageConfig". This
 * defines properties for connecting to your MarkLogic Manage API as well as some package file locations used for
 * installing your application. 
 */
apply plugin: 'ml-gradle'


//
// To use ml-gradle, you only need what is above this line. Everything below this line is optional and is intended to
// show different features provided by ml-gradle.
//


/*
 * For generating IDE project files you might consider leveraging the Eclipse or IntelliJ IDEA plugin.
 * See the Gradle docs for these plugins to see everything that they provide.
 */ 
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'


/*
 * This lists the repositories for finding project dependencies (which differ from buildscript dependencies - buildscript
 * dependencies are not included in project artifacts that are built). These repositories are needed to satisfy the
 * dependencies expressed below. 
 */
repositories {
    mavenCentral()
    maven {url "http://developer.marklogic.com/maven2/"}
    maven {url "http://rjrudin.github.io/marklogic-java/releases"}
}

/*
 * This custom Gradle configuration allows us to specify the classpath for running Corb jobs. This is only needed if 
 * you want to run Corb jobs via Gradle tasks. More info on Corb can be found at - http://developer.marklogic.com/code/corb.
 */
configurations { corb }

/*
 * This expresses dependencies on the ml-java and ml-junit libraries. The former is typically used for application 
 * code, and the latter supports writing JUnit-based tests. A dependency exists on RestAssured to show an option for
 * using that library in tests that must invoke MarkLogic HTTP endpoints.
 */
dependencies {
    compile "com.marklogic:ml-javaclient-util:1.0"
    testCompile "com.marklogic:ml-junit:1.0"
    testCompile "com.jayway.restassured:rest-assured:2.3.1"

    // Located at https://github.com/rjrudin/marklogic-java/tree/gh-pages/releases/com/marklogic/corb
    corb "com.marklogic:corb:1.0"
    corb "com.marklogic:marklogic-xcc:7.0.4"
}


ext {
    // This property is used for grouping all the custom tasks in this file so that they appear together when "gradle tasks" is run.
    // This is optional, but it's usually a good practice to group your tasks together.
    taskGroup = "Sample project tasks"
    
    /*
     * ml-gradle supports building database and HTTP server packages by merging one or more partial package files together.
     * ml-gradle starts with a "plain vanilla" package with default settings and then merges in each of the package files
     * that you specify.
     */
    mlAppConfig {
        databasePackageFilePaths = ["src/main/xqy/packages/content-database1.xml", "src/main/xqy/packages/content-database2.xml"]
        httpServerPackageFilePaths = ["src/main/xqy/packages/http-server.xml"]
    }

}


/*
 * This is an example of both a custom Gradle task and an easy way of invoking Corb. This depends on "mlLoadModules" to 
 * ensure that the Corb uris/transform modules are loaded. It also uses as a classpath the custom configuration named 
 * "corb" that we defined earlier. Note that sample uris.xqy and transform.xqy modules just print a log statement for
 * each document in your content database, so unless there are documents, you won't see any result from this. 
 */
task runCorb(dependsOn: ['mlLoadModules'], type: JavaExec, group: taskGroup) {
    main = 'com.marklogic.developer.corb.Manager'
    classpath = configurations.corb
    args = [mlAppConfig.xccUrl, '""', 'transform.xqy', '4', 'uris.xqy', '/ext/corb/', 'sample-project-modules', 'false']
}


/*
 * This is an example of creating a user, including roles, default collections, and permissions. ml-gradle does not
 * yet support a way of creating users via an XML file, though that would be straightforward to add.
 */
task createUser(type: com.marklogic.gradle.task.security.CreateUserTask, group: taskGroup) {
    username = "sample-project-user"
    userDescription = "Sample project user"
    password = "password"
    roleNames = ["alert-user", "rest-admin"]
    collections = ["default-collection"]
    permissionRoles = ["rest-reader", "rest-writer"]
    permissionCapabilities = ["read", "update"]
}


/*
 * Users can be easily removed.
 */
task removeUser(type: com.marklogic.gradle.task.security.RemoveUsersTask, group: taskGroup) { usernames = ["sample-project-user"] }


/*
 * This is an example of creating a role. Similar to users, ml-gradle does not yet support creating roles via an XML
 * file, though that too would be straightforward to add.
 */
task createRole(type: com.marklogic.gradle.task.security.CreateRoleTask, group: taskGroup) {
    roleName = "sample-project-role"
    roleDescription = "Sample project role role"
    roleNames = ["rest-reader"]
    permissionRoles = ["rest-reader", "rest-writer"]
    permissionCapabilities = ["read", "update"]
    collections = ["default-collection"]
    executePrivilegeActions = ["xdmp:login", "xdmp:eval"]
    uriPrivilegeActions = ["domain-uri", "pipeline-uri"]
}


/*
 * Roles can be easily removed too.
 */
task removeRole(type: com.marklogic.gradle.task.security.RemoveRolesTask, group: taskGroup) { roles = ["sample-project-role"] }


/*
 * An example of creating a CPF domain. pipelineNames defaults to "Status Change Handling" and "Alerting"; in this case,
 * we only want Status Change Handling. ml-gradle has a built-in task for inserting this pipeline, so this task depends
 * on that. 
 *
 * Note that in order for CPF to be installed, the application must have a triggers database. The presence of
 * src/main/xqy/packages/triggers-database.xml tells the mlInstallApp task (called by mlDeploy) to create a triggers
 * database. ml-gradle does not yet have support for a minimal/partial package file for a triggers database - you 
 * currently have to define a complete package file. 
 */
task createSampleDomain(type: com.marklogic.gradle.task.cpf.CreateDomainTask, group: taskGroup, dependsOn: ["mlInsertSchPipeline"]) {
    domainName = "sample-domain"
    domainDescription = "Domain for sample-collection"
    scope = "directory"
    scopeUri = "/"
    pipelineNames = ["Status Change Handling"]
}


/*
 * An example of creating a CPF domain configuration. This depends on the default domain existing, so this dependency
 * is expressed via the task. 
 */
task createDomainConfiguration(type: com.marklogic.gradle.task.cpf.CreateDomainConfigurationTask, group: taskGroup, dependsOn: ["createSampleDomain"]) {
    restartUser = mlAppConfig.username
    defaultDomainName = "sample-domain"
}


/*
 * An example of inserting a custom CPF pipeline. Multiple paths and multiple domain names can be included; each pipeline
 * will be attached to each domain name.
 */
task insertSamplePipeline(type: com.marklogic.gradle.task.cpf.InsertPipelinesTask, group: taskGroup, dependsOn: ["createDomainConfiguration"]) {
    filePaths = ["src/main/xqy/cpf/sample-pipeline.xml"]
    domainNames = ["sample-domain"]
}


/*
 * This is an example of defining dependencies on the ml-gradle built-in mlPostDeploy task. mlPostDeploy is invoked as
 * the last step of mlDeploy. It doesn't do anything by default. It exists so that a project can easily add tasks to the
 * end of mlDeploy via the dependsOn attribute of mlPostDeploy.
 */
mlPostDeploy.dependsOn mlUpdateHttpServers, insertSamplePipeline


/*
 * When mlClearModules clears the content database, it will exclude any URIs defined by its "excludes" attribute. The
 * URI below doesn't exist, this is just an example of how to use this feature.
 */
mlClearModules.excludes = ["/ext/rest-api/my-custom-rewriter.xqy"]


/*
 * If your application has hundreds of assets (modules under /ext), you most likely want to use Content Pump to load 
 * these modules rather than loading them one at a time via the REST API. To do so, make mlLoadModules depend on
 * mlLoadAssetsViaMlcp. mlLoadModules will still use the REST API for loading non-asset modules (options, transforms, etc).
 *
 * In order to use Content Pump, we need to tell Gradle where to find the Content Pump jar and its dependencies. To do
 * so, we create a new Gradle configuration named "mlcp" so we keep these dependencies separate from our application.
 * We then need to include an additional repository - the Cloudera repository - to resolve all the dependencies. 
 * Finally, the Content Pump POM has an issue (bug 31294) that requires us to tell Gradle not to pull in the dependencies
 * of commons-modeler, else the wrong version of xml-apis.jar is brought in, breaking Content Pump. Alas. So we add a 
 * dependency on Content Pump, but it's a little more complicated because of the commons-modeler exclusion.
 */
configurations { mlcp }
dependencies {
    mlcp("com.marklogic:mlcp-Hadoop2:1.2-3") { exclude module:"commons-modeler" }
    mlcp("commons-modeler:commons-modeler:2.0") { transitive = false }
}
repositories { maven {url "http://repository.cloudera.com/artifactory/cloudera-repos/" } }

mlLoadAssetsViaMlcp.classpath = configurations.mlcp
mlLoadModules.dependsOn mlLoadAssetsViaMlcp

/*
 * By default, extensions of MlcpTask will use mlAppConfig.xdbcPort, but that puts modules into the content database. We
 * instead want to use modulesXdbcPort, which will put modules in the modules database.
 */
mlLoadAssetsViaMlcp.port = mlAppConfig.modulesXdbcPort


/*
 * The mlLoadAssetsViaMlcp task above is actually an extension of MlcpTask, which is a convenience task for running
 * MarkLogic Content Pump (MLCP) via the Gradle JavaExec task (which MlcpTask extends). The task below shows an example
 * of running a Content Pump import. It depends on the configurations/dependencies/repositories blocks above for pulling
 * in Content Pump and its dependencies.
 *
 * By default, MlcpTask will set host/port/username/password basedg import on the configuration in mlAppConfig, which is populated
 * by the values in gradle.properties. MlcpTask also has a number of parameters for performing imports, though you can
 * always use the "args" array as shown below for passing in additional parameters.
 */
task importViaContentPump(type: com.marklogic.gradle.task.MlcpTask) {
    classpath = configurations.mlcp
    command = "IMPORT"
    input_file_path = "path/to/some-file.csv"
    args = ["-document_type", "text"]
}


/*
 * For tests that reference test files in the test source tree, we need to tell Gradle to copy these to src/test/resources
 * so that they can be found when running "gradle test".
 */
sourceSets.test.resources.srcDir 'src/test/java'
